{"version":3,"sources":["models/Operation.ts","context/ExchangeContext.ts","mockData/initialAccounts.ts","utils/utils.ts","reducer.ts","init.ts","hooks/useExchange.ts","hooks/useQuery.ts","provider/ExchangeProvider.tsx","provider/QueryProvider.tsx","Components/CurrencyInput/styled.ts","Components/CurrencyInput/ChevronDown.tsx","Components/CurrencyInput/CurrencyInput.tsx","Components/styled.ts","Components/CurrencyMenu/styled.ts","Components/CurrencyMenu/ArrowLeft.tsx","Components/CurrencyMenu/Close.tsx","Components/CurrencyMenu/CurrencyMenu.tsx","Components/OperationSwitcher/ArrowUp.tsx","Components/OperationSwitcher/ArrowDown.tsx","Components/OperationSwitcher/styled.ts","Components/OperationSwitcher/OperationSwitcher.tsx","Screens/Exchange/styled.ts","Screens/Exchange/ChartLine.tsx","Screens/Exchange/Exchange.tsx","App.tsx","index.tsx"],"names":["Operation","initValue","ExchangeContext","createContext","initialAccounts","USD","code","balance","EUR","GBP","MXN","invertInput","invertOperation","Sell","Buy","MULTIPLIER","mutateNumber","value","Math","round","convert","rates","base","from","to","amount","rate","parseFloat","toFixed","fromCurrecyRate","toCurrencyRate","Error","calculateRate","numericAmount","mutatedAmount","mutatedRate","mutatedNumericResult","makeOperation","operation","side","account","mutatedBalance","Number","checkExceeded","isTop","reducer","state","payload","active","top","activeKey","passiveKey","activeAccount","passiveAccount","type","Actions","ChangeActiveAccount","ChangeActiveAmount","ChangeAccount","Exchange","accounts","bottom","updatedTop","updatedBottom","exchange","ToggleOperation","UpdateNames","names","UpdateRates","initRates","init","Object","entries","reduce","accountsArray","useExchange","useContext","APP_ID","urlCurrencies","URL","searchParams","append","fetchCurrencies","a","fetch","json","urlLatest","fetchLatest","ExchangeProvider","children","useReducer","dispatch","changeActiveAccount","useCallback","changeActiveAmmount","changeAccount","toggleOperation","makeExchange","updateNames","updateRates","useState","enabled","setEnabled","handleSuccessCurrencies","useQueryLib","onSuccess","isLoadingCurrencies","isLoading","currenciesData","data","refetchInterval","isLoadingRates","ratesData","useEffect","useQuery","Provider","queryClient","QueryClient","QueryProvider","QueryClientProvider","client","Wrapper","styled","div","StartAdornment","ChangeButton","button","Label","span","InputField","input","HelperText","ChevronDown","width","height","viewBox","fill","d","operationMap","invertedOperationMap","CurrencyInput","onAccountChange","activeCode","prefix","setPrefix","handleClick","handleAmountChange","event","pureValue","target","replace","test","startsWith","handleFocus","onClick","onChange","placeholder","onFocus","Screen","Content","CurrencySearch","List","ul","ListItem","li","Dot","Name","ArrowLeft","Close","CurrencyMenu","onCurrencyChange","setValue","useMemo","map","filter","handleClose","handleChange","currentTarget","getAttribute","handleClear","filteredAccounts","includes","disabled","role","ArrowUp","ArrowDown","SwitchButton","OperationSwitcher","onToggleOperation","Info","Action","Rate","ConfirmButton","ChartLine","accountToChange","setAccountToChange","handleAccountChange","renderRate","exceededBalance","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb53a9aa.chunk.js","sourcesContent":["export enum Operation {\r\n    Sell = 'sell',\r\n    Buy = 'buy',\r\n}\r\n","import { createContext } from 'react';\r\n\r\nimport { UseExchange } from '../hooks';\r\n\r\nconst initValue = {} as UseExchange;\r\n\r\nexport const ExchangeContext = createContext(initValue);\r\n","import { UserAccounts } from \"../models\";\r\n\r\n\r\nexport const initialAccounts: UserAccounts = {\r\n    USD: {\r\n        code: 'USD',\r\n        balance: 800.77,\r\n    },\r\n    EUR: {\r\n        code: 'EUR',\r\n        balance: 150.44,\r\n    },\r\n    GBP: {\r\n        code: 'GBP',\r\n        balance: 200.05,\r\n    },\r\n    MXN: {\r\n        code: 'MXN',\r\n        balance: 300,\r\n    },\r\n};\r\n","import { Currency, Operation } from \"../models\";\r\nimport { State, ExchangeSide } from '../provider';\r\n\r\nexport const invertOperation = {\r\n    [Operation.Sell]: Operation.Buy,\r\n    [Operation.Buy]: Operation.Sell,\r\n}\r\n\r\nconst PRECISION = 2;\r\nconst MULTIPLIER = 10 ** PRECISION;\r\n\r\nconst mutateNumber = (value: number) => Math.round(value * MULTIPLIER);\r\n\r\nconst calculateRate = (rates: Partial<Record<Currency, number>>, base: Currency, from: Currency, to: Currency): number => {\r\n    if (base === from) {\r\n        return rates[to]!;\r\n    }\r\n\r\n    if (base === to) {\r\n        return parseFloat((1! / rates[from]!).toFixed(8));\r\n    }\r\n\r\n    const fromCurrecyRate = rates[from];\r\n    const toCurrencyRate = rates[to];\r\n\r\n    if (!fromCurrecyRate) {\r\n        throw new Error(`rate ${base}/${from} not found`);\r\n    }\r\n\r\n    if (!toCurrencyRate) {\r\n        throw new Error(`rate ${base}/${to} not found`);\r\n    }\r\n\r\n    return parseFloat((toCurrencyRate! / fromCurrecyRate!).toFixed(8));\r\n};\r\n\r\nexport const convert = (rates: Partial<Record<Currency, number>>, base: Currency, from: Currency, to: Currency, amount: string) => {\r\n    const rate = calculateRate(rates, base, from, to);\r\n\r\n    if (!rate) {\r\n        throw new Error(`rate ${from}/${to} not found`);\r\n    }\r\n\r\n    if (!amount) {\r\n        return ''\r\n    }\r\n\r\n    const numericAmount = parseFloat(amount);\r\n    const mutatedAmount = mutateNumber(numericAmount);\r\n    const mutatedRate = mutateNumber(rate);\r\n    const mutatedNumericResult = Math.round(mutatedAmount * mutatedRate);\r\n    const numericResult = Math.round(mutatedNumericResult / MULTIPLIER) / MULTIPLIER;\r\n\r\n    return numericResult.toFixed(2);\r\n};\r\n\r\nconst makeOperation = (\r\n    operation: Operation,\r\n    side: ExchangeSide,\r\n) => {\r\n    const { account, amount } = side;\r\n    const { balance } = account;\r\n\r\n    const mutatedBalance = mutateNumber(balance);\r\n    const numericAmount = parseFloat(amount);\r\n    const mutatedAmount = mutateNumber(numericAmount);\r\n    const mutatedNumericResult = Math.round(\r\n        operation === Operation.Sell\r\n            ? mutatedBalance - mutatedAmount\r\n            : mutatedBalance + mutatedAmount\r\n    );\r\n\r\n    return {\r\n        ...account,\r\n        balance: Number((mutatedNumericResult / MULTIPLIER).toFixed(2)),\r\n    };\r\n};\r\n\r\nexport const exchange = (state: State) => {\r\n    const { accounts, top, bottom, operation } = state;\r\n    const updatedTop = makeOperation(operation, top);\r\n    const updatedBottom = makeOperation(invertOperation[operation], bottom);\r\n\r\n    return {\r\n        ...state,\r\n        active: updatedTop,\r\n        top: {\r\n            ...top,\r\n            account: updatedTop\r\n        },\r\n        bottom: {\r\n            ...bottom,\r\n            account: updatedBottom\r\n        },\r\n        accounts: {\r\n            ...accounts,\r\n            [top.account.code]: updatedTop,\r\n            [bottom.account.code]: updatedBottom,\r\n        },\r\n    };\r\n};\r\n\r\nexport const checkExceeded = (isTop: boolean, operation: Operation, balance: number, amount: string) => {\r\n    if (isTop) {\r\n        return operation === Operation.Sell ? balance < parseFloat(amount) : false;\r\n    }\r\n\r\n    return operation === Operation.Buy ? balance < parseFloat(amount) : false;\r\n};\r\n","import { State, Actions, Payload } from './provider';\r\nimport { invertOperation, convert, exchange } from './utils';\r\n\r\nenum invertInput {\r\n    top = 'bottom',\r\n    bottom = 'top',\r\n}\r\n\r\nexport const reducer = (state: State, payload: Payload) => {\r\n    const { active, top, operation } = state;\r\n    const { account: { code: topCode } } = top;\r\n    const isTopActive = topCode === active.code;\r\n    const activeKey = isTopActive ? 'top' : 'bottom';\r\n    const passiveKey = invertInput[activeKey];\r\n    const activeAccount = state[activeKey].account;\r\n    const passiveAccount = state[passiveKey].account;\r\n\r\n    switch (payload.type) {\r\n        case Actions.ChangeActiveAccount:\r\n            return {\r\n                ...state,\r\n                active: payload.account!,\r\n            };\r\n        case Actions.ChangeActiveAmount:\r\n            return {\r\n                ...state,\r\n                [activeKey]: {\r\n                    ...state[activeKey],\r\n                    amount: payload.amount!,\r\n                },\r\n                [passiveKey]: {\r\n                    ...state[passiveKey],\r\n                    amount: convert(state.rates, state.base, activeAccount.code, passiveAccount.code, payload.amount!),\r\n                }\r\n            };\r\n        case Actions.ChangeAccount:\r\n            if (payload.account!.code === activeAccount.code) {\r\n                throw new Error(`goddamn: ${payload.account!.code}, ${activeAccount.code}`);\r\n            }\r\n\r\n            if (payload.account!.code === passiveAccount.code) {\r\n                return {\r\n                    ...state,\r\n                    active: {\r\n                        ...passiveAccount,\r\n                        amount: '',\r\n                    },\r\n                    [activeKey]: {\r\n                        account: passiveAccount,\r\n                        amount: '',\r\n                    },\r\n                    [passiveKey]: {\r\n                        account: activeAccount,\r\n                        amount: '',\r\n                    },\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                active: payload.account!,\r\n                [activeKey]: {\r\n                    account: payload.account!,\r\n                    amount: '',\r\n                },\r\n                [passiveKey]: {\r\n                    ...state[passiveKey],\r\n                    amount: '',\r\n                },\r\n            };\r\n        case Actions.Exchange:\r\n            return exchange(state);\r\n        case Actions.ToggleOperation:\r\n            return {\r\n                ...state,\r\n                operation: invertOperation[operation],\r\n            };\r\n        case Actions.UpdateNames:\r\n            return {\r\n                ...state,\r\n                names: payload.names!,\r\n            };\r\n        case Actions.UpdateRates:\r\n            return {\r\n                ...state,\r\n                rates: payload.rates!,\r\n                base: payload.base!,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { Currency, Account, UserAccounts, Operation } from './models';\r\n\r\nimport { State } from './provider';\r\n\r\nconst initRates = {\r\n    EUR: 0.85,\r\n    GBP: 0.73,\r\n    MXN: 20,\r\n};\r\n\r\nexport const init = (accounts: UserAccounts): State => {\r\n    const [top, bottom] = (Object.entries(accounts) as [Currency, Account][]).reduce<Account[]>((accountsArray, [, account]) => [...accountsArray, account], []);\r\n\r\n    return {\r\n        accounts,\r\n        active: top,\r\n        top: { account: top, amount: '' },\r\n        bottom: { account: bottom, amount: '' },\r\n        operation: Operation.Buy,\r\n        rates: initRates,\r\n        base: 'USD',\r\n    };\r\n};\r\n","import { useContext } from 'react';\r\n\r\nimport { ExchangeContext } from '../context';\r\nimport { Account } from '../models';\r\nimport { State } from '../provider';\r\n\r\nexport interface UseExchange {\r\n    changeActiveAccount: (account: Account) => void;\r\n    changeActiveAmmount: (ammount: string) => void;\r\n    changeAccount: (account: Account) => void;\r\n    toggleOperation: () => void;\r\n    makeExchange: () => void;\r\n    state: State;\r\n}\r\n\r\nexport const useExchange = function () {\r\n    return useContext(ExchangeContext);\r\n};\r\n","import { useState, useCallback, useEffect } from 'react';\r\nimport { useQuery as useQueryLib } from 'react-query'\r\n\r\nimport { Currency } from '../models';\r\n\r\nconst APP_ID = '3a6f503e28aa47ddb6682031bd78a828';\r\n\r\nconst UPDATE_INTERVAL = 10000;\r\n\r\nconst urlCurrencies = new URL('https://openexchangerates.org/api/currencies.json');\r\nurlCurrencies.searchParams.append('app_id', APP_ID);\r\nconst fetchCurrencies = async () => await (await fetch(`${urlCurrencies}`)).json();\r\n\r\nconst urlLatest = new URL('https://openexchangerates.org/api/latest.json');\r\nurlLatest.searchParams.append('app_id', APP_ID);\r\nconst fetchLatest = async () => await (await fetch(`${urlLatest}`)).json();\r\n\r\nexport const useQuery = function (updateNames: (names: Record<Currency, string>) => void, updateRates: (base: Currency, rates: Record<Currency, number>) => void) {\r\n    const [enabled, setEnabled] = useState(true);\r\n\r\n    const handleSuccessCurrencies = useCallback(() => setEnabled(false), []);\r\n\r\n    const { isLoading: isLoadingCurrencies, data: currenciesData } = useQueryLib('currencies', fetchCurrencies, { enabled, onSuccess: handleSuccessCurrencies });\r\n    const { isLoading: isLoadingRates, data: ratesData } = useQueryLib('latest', fetchLatest, { refetchInterval: UPDATE_INTERVAL });\r\n\r\n    useEffect(() => {\r\n        if (!isLoadingCurrencies && currenciesData) {\r\n            updateNames(currenciesData);\r\n        }\r\n    }, [currenciesData, isLoadingCurrencies, updateNames]);\r\n\r\n    useEffect(() => {\r\n        if (!isLoadingRates && ratesData) {\r\n            updateRates(ratesData.base, ratesData.rates);\r\n        }\r\n    }, [ratesData, isLoadingRates, updateRates]);\r\n};\r\n","import React, { useReducer, useCallback } from 'react';\r\n\r\nimport { ExchangeContext } from '../context';\r\nimport { initialAccounts } from '../mockData';\r\nimport { Currency, Operation, Account, UserAccounts } from '../models';\r\n\r\nimport { reducer } from '../reducer';\r\nimport { init } from '../init';\r\nimport { useQuery } from '../hooks';\r\n\r\nexport enum Actions {\r\n    Active = 'active',\r\n    ChangeActiveAccount = 'changeActiveAccount',\r\n    ChangeActiveAmount = 'changeActiveAmount',\r\n    ChangeAccount = 'changeAccount',\r\n    Exchange = 'exchange',\r\n    ToggleOperation = 'toggleOperation',\r\n    UpdateNames = 'updateNames',\r\n    UpdateRates = 'updateRates',\r\n}\r\n\r\nexport interface ExchangeSide {\r\n    account: Account;\r\n    amount: string;\r\n}\r\n\r\nexport interface State {\r\n    accounts: UserAccounts;\r\n    active: Account;\r\n    top: ExchangeSide;\r\n    bottom: ExchangeSide;\r\n    operation: Operation;\r\n    names?: Partial<Record<Currency, string>>;\r\n    rates: Partial<Record<Currency, number>>;\r\n    base: Currency;\r\n}\r\n\r\nexport interface Payload {\r\n    type: Actions;\r\n    account?: Account;\r\n    names?: Record<Currency, string>;\r\n    rates?: Record<Currency, number>;\r\n    amount?: string;\r\n    base?: Currency;\r\n    operation?: Operation;\r\n}\r\n\r\nexport type Reducer = (state: State, payload: Payload) => void;\r\n\r\nexport const ExchangeProvider: React.FC = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialAccounts, init);\r\n\r\n    const changeActiveAccount = useCallback((account: Account) => dispatch({ type: Actions.ChangeActiveAccount, account }), []);\r\n    const changeActiveAmmount = useCallback((amount: string) => dispatch({ type: Actions.ChangeActiveAmount, amount }), []);\r\n    const changeAccount = useCallback((account: Account) => dispatch({ type: Actions.ChangeAccount, account }), []);\r\n    const toggleOperation = useCallback(() => dispatch({ type: Actions.ToggleOperation }), []);\r\n    const makeExchange = useCallback(() => dispatch({ type: Actions.Exchange }), []);\r\n    const updateNames = useCallback((names: Record<Currency, string>) => dispatch({ type: Actions.UpdateNames, names }), []);\r\n    const updateRates = useCallback((base: Currency, rates: Record<Currency, number>) => dispatch({ type: Actions.UpdateRates, base, rates }), []);\r\n\r\n    useQuery(updateNames, updateRates);\r\n\r\n    const value = {\r\n        changeActiveAccount,\r\n        changeActiveAmmount,\r\n        changeAccount,\r\n        toggleOperation,\r\n        makeExchange,\r\n        state,\r\n    };\r\n\r\n    return (\r\n        <ExchangeContext.Provider value={value}>\r\n            {children}\r\n        </ExchangeContext.Provider>\r\n    );\r\n};\r\n","import { QueryClient, QueryClientProvider } from 'react-query'\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nexport const QueryProvider: React.FC = ({ children }) => {\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            {children}\r\n        </QueryClientProvider>\r\n    )\r\n};\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    border-radius: 2px;\r\n    background-color: #fff;\r\n    position: relative;\r\n    padding: 5px 10px 5px 5px;\r\n`;\r\n\r\nexport const StartAdornment = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: absolute;\r\n    max-width: 100px;\r\n    height: calc(100% - 10px);\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const ChangeButton = styled.button`\r\n    border: none;\r\n    display: flex;\r\n    align-items: center;\r\n    width: fit-content;\r\n    border-radius: 5px;\r\n    background-color: transparent;\r\n    padding: 0 10px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n\r\n    :hover {\r\n        background-color: #f7f5f7;\r\n    }\r\n`;\r\n\r\nexport const Label = styled.span`\r\n    white-space: nowrap;\r\n    color: darkgrey;\r\n    font-size: 12px;\r\n    font-weight: 400;\r\n    margin-left: 5px;\r\n`;\r\n\r\nexport const InputField = styled.input`\r\n    width: 100%;\r\n    height: 24px;\r\n    padding: 0 0 20px 100px;\r\n    outline: none;\r\n    text-align: end;\r\n    border: none;\r\n    font-weight: 800;\r\n    font-size: 14px;\r\n`;\r\n\r\nexport const HelperText = styled.span`\r\n    position: absolute;\r\n    right: 5px;\r\n    bottom: 5px;\r\n    color: #cc7e81;\r\n    font-size: 12px;\r\n    font-weight: 400;\r\n`;\r\n","import React from 'react';\r\n\r\nexport const ChevronDown = () => {\r\n    return (\r\n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\r\n            <path fill=\"currentColor\" d=\"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\" />\r\n        </svg>\r\n    );\r\n};\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\n\r\nimport { Account, Operation } from '../../models';\r\nimport { useExchange } from '../../hooks';\r\nimport { checkExceeded } from '../../utils';\r\n\r\nimport { Wrapper, StartAdornment, ChangeButton, Label, HelperText, InputField } from './styled';\r\nimport { ChevronDown } from './ChevronDown';\r\n\r\nconst operationMap = {\r\n    [Operation.Sell]: '-',\r\n    [Operation.Buy]: '+',\r\n};\r\n\r\nconst invertedOperationMap = {\r\n    [Operation.Sell]: '+',\r\n    [Operation.Buy]: '-',\r\n};\r\n\r\nexport interface CurrencyInputProps {\r\n    isTop?: boolean;\r\n    account: Account;\r\n    onAccountChange: (account: Account) => void;\r\n}\r\n\r\nexport const CurrencyInput: React.FC<CurrencyInputProps> = ({ isTop = false, account, onAccountChange }) => {\r\n    const { state: { active: { code: activeCode }, operation, top, bottom }, changeActiveAccount, changeActiveAmmount } = useExchange();\r\n\r\n    const { code, balance } = account;\r\n    const active = code === activeCode;\r\n    const { amount } = (isTop ? top : bottom);\r\n    const numericAmount = parseFloat(amount);\r\n\r\n    const [prefix, setPrefix] = useState(numericAmount > 0 ? operationMap[operation] : '');\r\n\r\n    const handleClick = useCallback(() => onAccountChange(account), [onAccountChange, account]);\r\n\r\n    const handleAmountChange = useCallback(\r\n        event => {\r\n            const inputValue: string = event.target.value;\r\n\r\n            const pureValue = inputValue.replace(/[^0-9.]/g, '').replace(/^0+/, '');\r\n\r\n            if (pureValue === '' || parseFloat(pureValue) === 0) {\r\n                changeActiveAmmount('');\r\n                return;\r\n            }\r\n\r\n            if (/^\\d*[.]{0,1}\\d{0,2}$/.test(pureValue)) {\r\n                changeActiveAmmount(pureValue.startsWith('.') ? `0${pureValue}` : pureValue);\r\n            }\r\n        },\r\n        [changeActiveAmmount],\r\n    );\r\n\r\n    const handleFocus = useCallback(() => changeActiveAccount(account), [changeActiveAccount, account]);\r\n\r\n    useEffect(() => {\r\n        setPrefix(numericAmount > 0 ? (isTop ? operationMap[operation] : invertedOperationMap[operation]) : '');\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [amount, operation]);\r\n\r\n    return (\r\n        <Wrapper data-testid={isTop ? 'top-container' : 'bottom-container'}>\r\n            <StartAdornment>\r\n                <ChangeButton data-testid=\"change-account-btn\" onClick={handleClick}>\r\n                    {account.code}<ChevronDown />\r\n                </ChangeButton>\r\n                <Label>\r\n                    {`Balance ${balance}`}\r\n                </Label>\r\n            </StartAdornment>\r\n            <InputField data-testid={isTop ? 'top-input' : 'bottom-input'} value={(!active && !amount) ? '' : `${prefix}${amount}`} onChange={handleAmountChange} placeholder=\"0\" type=\"text\" onFocus={handleFocus} />\r\n            <HelperText>\r\n                {checkExceeded(isTop, operation, balance, amount) && 'exceeds balance'}\r\n            </HelperText>\r\n        </Wrapper>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const Screen = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-contnent: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #f7f5f7;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 320px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 200px;\r\n    align-items: center;\r\n\r\n    > :not(:last-child) {\r\n        margin-bottom: 5px;\r\n    }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Screen = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-contnent: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #fff;\r\n`;\r\n\r\nexport const CurrencySearch = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #fff;\r\n\r\n    button {\r\n        border: none;\r\n        cursor: pointer;\r\n        background-color: transparent;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        border-radius: 50%;\r\n        padding: 6px;\r\n\r\n        :hover {\r\n            background-color: #f7f5f7\r\n        }\r\n    }\r\n\r\n    input {\r\n        flex-grow: 1;\r\n        border: none;\r\n        outline: none;\r\n        padding: 0 20px;\r\n    }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    width: 100%;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    background-color: #fff;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    padding: 0 10px;\r\n    cursor: pointer;\r\n\r\n    :hover {\r\n        background-color: #f7f5f7;\r\n    }\r\n`;\r\n\r\nexport const Label = styled.span`\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n`;\r\n\r\nexport const Dot = styled.div`\r\n    width: 5px;\r\n    height: 5px;\r\n    margin: 0 10px;\r\n    border-radius: 50%;\r\n    background-color: #000;\r\n`;\r\n\r\nexport const Name = styled.span`\r\n    font-size: 10px;\r\n    font-weight: 500;\r\n    line-height: 16px;\r\n    color: darkgrey;\r\n`;\r\n","import React from 'react';\r\n\r\nexport const ArrowLeft = () => {\r\n    return (\r\n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\r\n            <path fill=\"currentColor\" d=\"M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z\" />\r\n        </svg>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport const Close = () => {\r\n    return (\r\n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\r\n            <path fill=\"currentColor\" d=\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\" />\r\n        </svg>\r\n    );\r\n};\r\n","import React, { useState, useCallback, useMemo } from 'react';\r\n\r\nimport { Content } from '../styled';\r\nimport { useExchange } from '../../hooks';\r\nimport { Currency } from '../../models';\r\n\r\nimport { Screen, CurrencySearch, List, ListItem, Label, Dot, Name } from './styled';\r\nimport { ArrowLeft } from './ArrowLeft';\r\nimport { Close } from './Close';\r\n\r\nexport interface CurrencyMenuProps {\r\n    onCurrencyChange: () => void;\r\n}\r\n\r\nexport const CurrencyMenu: React.FC<CurrencyMenuProps> = ({ onCurrencyChange }) => {\r\n    const [value, setValue] = useState('');\r\n    const { state, changeAccount } = useExchange();\r\n    const { accounts, active, names } = state;\r\n\r\n    const accountsArray = useMemo(() => Object.entries(accounts).map(([, account]) => account).filter(account => account.code !== active.code), [accounts, active]);\r\n\r\n    const handleClose = useCallback(() => onCurrencyChange(), [onCurrencyChange]);\r\n\r\n    const handleChange = useCallback(event => setValue(event.target.value), []);\r\n\r\n    const handleClick = useCallback(\r\n        event => {\r\n            const value = event.currentTarget.getAttribute('data-currency');\r\n            changeAccount(accounts[value as Currency]);\r\n            handleClose();\r\n        },\r\n        [changeAccount, handleClose, accounts]\r\n    );\r\n\r\n    const handleClear = useCallback(() => setValue(''), []);\r\n\r\n    const filteredAccounts = value ? accountsArray.filter(({ code }) => code.includes(value)) : accountsArray;\r\n\r\n    return (\r\n        <Screen>\r\n            <Content>\r\n                <CurrencySearch>\r\n                    <button onClick={handleClose}><ArrowLeft /></button>\r\n                    <input data-testid=\"currency-input\" onChange={handleChange} value={value} />\r\n                    <button disabled={!value} onClick={handleClear}><Close /></button>\r\n                </CurrencySearch>\r\n                <List role=\"listbox\" data-testid=\"currenct-list\">\r\n                    {filteredAccounts.map(({ code, balance }) => (\r\n                        <ListItem role=\"option\" data-testid={`${code}-item`} key={code} data-currency={code} onClick={handleClick}>\r\n                            <Label>{code}<Dot />{balance}</Label>\r\n                            {names?.[code] && <Name>{names?.[code]}</Name>}\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </Content>\r\n        </Screen>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport const ArrowUp = () => {\r\n    return (\r\n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\r\n            <path fill=\"currentColor\" d=\"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\" />\r\n        </svg>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport const ArrowDown = () => {\r\n    return (\r\n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\r\n            <path fill=\"currentColor\" d=\"M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z\" />\r\n        </svg>\r\n    );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    width: 100%;\r\n    height: 0;\r\n    display: flex;\r\n    position: relative;\r\n    z-index: 1;\r\n`;\r\n\r\nexport const SwitchButton = styled.button`\r\n    width: 28px;\r\n    height: 28px;\r\n    padding: 0;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    border: 4px solid #f7f5f7;\r\n    background-color: #fff;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    > svg {\r\n        width: 12px;\r\n        height: 12px;\r\n        color: #0357ef;\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Operation } from '../../models';\r\nimport { ArrowUp } from './ArrowUp'\r\nimport { ArrowDown } from './ArrowDown';\r\n\r\nimport { Wrapper, SwitchButton } from './styled';\r\n\r\nconst operationMap = {\r\n    [Operation.Sell]: <ArrowDown />,\r\n    [Operation.Buy]: <ArrowUp />,\r\n};\r\n\r\nexport interface OperationSwitcherProps {\r\n    operation: Operation;\r\n    onToggleOperation: () => void;\r\n}\r\n\r\nexport const OperationSwitcher: React.FC<OperationSwitcherProps> = ({ operation, onToggleOperation }) => {\r\n    return (\r\n        <Wrapper>\r\n            <SwitchButton data-testid=\"switch-btn\" onClick={onToggleOperation}>{operationMap[operation]}</SwitchButton>\r\n        </Wrapper>\r\n    )\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Content = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    max-width: 320px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-contnent: center;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Info = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const Action = styled.div`\r\n    font-size: 24px;\r\n    font-weight: 600;\r\n    text-transform: capitalize;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Rate = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 12px;\r\n    color: #0357ef;\r\n\r\n    > svg {\r\n        width: 12px;\r\n        height: 12px;\r\n        margin-right: 5px;\r\n    }\r\n`;\r\n\r\nexport const ConfirmButton = styled.button`\r\n    margin-top: 100px;\r\n    background-color: #0357ef;\r\n    color: #fff;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n    text-transform: capitalize;\r\n    height: 40px;\r\n    border: none;\r\n\r\n    :hover {\r\n        opacity: 0.9;\r\n    }\r\n\r\n    :disabled {\r\n        opacity: 0.5;\r\n        cursor: default;\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\nexport const ChartLine = () => {\r\n    return (\r\n        <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\r\n            <path fill=\"currentColor\" d=\"M3.5,18.5L9.5,12.5L13.5,16.5L22,6.92L20.59,5.5L13.5,13.5L9.5,9.5L2,17L3.5,18.5Z\" />\r\n        </svg>\r\n    );\r\n};\r\n","import React, { useState, useCallback } from 'react';\r\n\r\nimport { Account, Currency, Operation, UserAccounts } from '../../models';\r\nimport { CurrencyMenu, CurrencyInput, Screen, Content, OperationSwitcher, } from '../../Components';\r\nimport { useExchange } from '../../hooks';\r\nimport { convert, checkExceeded } from '../../utils';\r\n\r\nimport { Info, Action, Rate, ConfirmButton } from './styled';\r\nimport { ChartLine } from './ChartLine';\r\n\r\nexport interface ExchangeProps {\r\n    accounts: UserAccounts;\r\n    onExchange: ({ sell, buy, amount }: { sell: Currency; buy: Currency; amount: number, operation: Operation }) => void;\r\n    onRecalculate: ({ from, to, amount }: { from: Currency, to: Currency, amount: number }) => number;\r\n}\r\n\r\nexport const Exchange: React.FC = () => {\r\n    const [accountToChange, setAccountToChange] = useState<Account>();\r\n\r\n    const { state, changeActiveAccount, toggleOperation, makeExchange } = useExchange();\r\n\r\n    const { operation, top, bottom, active } = state;\r\n\r\n    const handleAccountChange = useCallback((account?: Account) => {\r\n        account && changeActiveAccount(account);\r\n        setAccountToChange(account);\r\n    }, [changeActiveAccount, setAccountToChange]);\r\n\r\n    const renderRate = useCallback(({ rates, base, top, bottom }) => convert(rates, base, top.account.code, bottom.account.code, '1'), []);\r\n\r\n    if (!!accountToChange) {\r\n        return <CurrencyMenu onCurrencyChange={handleAccountChange} />;\r\n    }\r\n\r\n    const exceededBalance = checkExceeded(true, operation, top.account?.balance, top.amount) || checkExceeded(false, operation, bottom.account.balance, bottom.amount);\r\n\r\n    return (\r\n        <Screen>\r\n            <Content>\r\n                <Info>\r\n                    <Action>\r\n                        {`${operation} ${active.code}`}\r\n                    </Action>\r\n                    <Rate>\r\n                        <ChartLine />\r\n                        {`1${top.account.code} = ${renderRate(state) + bottom.account.code}`}\r\n                    </Rate>\r\n                </Info>\r\n                <CurrencyInput isTop account={top.account} onAccountChange={handleAccountChange} />\r\n                <OperationSwitcher operation={operation} onToggleOperation={toggleOperation} />\r\n                <CurrencyInput account={bottom.account} onAccountChange={handleAccountChange} />\r\n                <ConfirmButton data-testid=\"confirm-btn\" onClick={makeExchange} disabled={exceededBalance || !top.amount || !bottom.amount}>\r\n                    {operation} {top.account.code} for {bottom.account.code}\r\n                </ConfirmButton>\r\n            </Content>\r\n        </Screen>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport { ExchangeProvider, QueryProvider } from './provider';\r\nimport { Exchange } from './Screens';\r\n\r\nconst App = () => (\r\n  <QueryProvider>\r\n    <ExchangeProvider >\r\n      <Exchange />\r\n    </ExchangeProvider >\r\n  </QueryProvider>\r\n);\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}